#!/usr/bin/env ansible-playbook

################################################################################
#
# Title:        23_create_tenant_user.yml 
# Author:       Adrian Bronder
# Date:         2020-06-25
# Description:  Create a user on tenant/org
#               with Ansible modules
#
# Modules:      nac_sg_org_user
#
# URLs:         https://docs.netapp.com/sgws-113/index.jsp
#               https://galaxy.ansible.com/netapp/storagegrid
#
# Built-in help:
# ansible-doc netapp.storagegrid.nac_sg_org_user
#
################################################################################

- hosts: localhost
  gather_facts: false
  vars:
    input_grid: &input_grid
      api_url:                     "https://{{ SG_ADMIN_NODE }}"
      auth_token:                  "{{ grid_auth_response.json.data }}"
      validate_certs:              false
    input_tenant: &input_tenant
      api_url:                     "https://{{ SG_ADMIN_NODE }}"
      auth_token:                  "{{ tenant_auth_response.json.data }}"
      validate_certs:              false
  vars_files:
    - ../global.vars
  collections:
    - netapp.storagegrid

  tasks:
  - name: Get GRID authorization token
    uri:
      url:                         "https://{{ SG_ADMIN_NODE }}/api/v3/authorize"
      method:                      POST
      validate_certs:              false
      body_format:                 json
      body: {
        "username":                "{{ SG_ADMIN_USER }}",
        "password":                "{{ SG_ADMIN_PASS }}",
        "cookie":                  false,
        "csrfToken":               false
      }
    register: grid_auth_response

  - name: Get GRID tenants
    uri:
      url:                         "https://{{ SG_ADMIN_NODE }}/api/v3/grid/accounts"
      method:                      GET
      validate_certs:              false
      headers: {
        "accept":                  "application/json",
        "Authorization":           "{{ grid_auth_response.json.data }}"
      }
    register: grid_tenants

  - name: Get tenant by name
    set_fact:
      selected_tenant: '{{ grid_tenants.json.data |
                           selectattr("name", "equalto", TENANT) |
                           list }}'

  - name: Check for unique tenant
    fail:
      msg: "Unique tenant ID for given name '{{ TENANT }}' not found"
    when:
      ( selected_tenant | length ) != 1

  - name: Get tenant authorization token
    uri:
      url:                         "https://{{ SG_ADMIN_NODE }}/api/v3/authorize"
      method:                      POST
      validate_certs:              false
      body_format:                 json
      body: {
        "accountId":               "{{ selected_tenant.0.id }}",
        "username":                "root",
        "password":                "{{ TENANT_ROOT_PASS }}",
        "cookie":                  false,
        "csrfToken":               false
      }
    register: tenant_auth_response

  - name: Create tenant user
    nac_sg_org_user:
      state:                       present
      full_name:                   "{{ TENANT_USER_NAME }}"
      unique_name:                 "user/{{ TENANT }}-{{ TENANT_USER_NAME }}"
      member_of:                   "group/{{ TENANT }}-{{ TENANT_GROUP_NAME }}"
      <<: *input_tenant

# FIXME - Woraround - Password for administrative access cannot be set
# with Ansible modules at the moment

  - name: Change tenant user password
    uri:
      url:                         "https://{{ SG_ADMIN_NODE }}/api/v3/org/users/user/{{ TENANT }}-{{ TENANT_USER_NAME }}/change-password"
      method:                      POST
      status_code:                 204
      validate_certs:              false
      headers: {
        "accept":                  "application/json",
        "Authorization":           "{{ tenant_auth_response.json.data }}"
      }
      body_format:                 json
      body: {
        "password":                "{{ TENANT_USER_PASS }}"
      }
