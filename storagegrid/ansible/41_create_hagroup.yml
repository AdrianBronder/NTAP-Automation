#!/usr/bin/env ansible-playbook

################################################################################
#
# Title:        41_create_hagroup.yml 
# Author:       Adrian Bronder
# Date:         2020-06-18
# Description:  Create a tenant on StorageGRID cluster
#               with Ansible modules
#
# Modules:      nac_sg_grid_account
#
# URLs:         https://docs.netapp.com/sgws-113/index.jsp
#               https://galaxy.ansible.com/netapp/storagegrid
#
# Built-in help:
# ansible-doc netapp.storagegrid.nac_sg_grid_account
#
################################################################################

- hosts: localhost
  gather_facts: false
  vars:
    input_grid: &input_grid
      api_url:                 "https://{{ SG_ADMIN_NODE }}"
      auth_token:              "{{ grid_auth_response.json.data }}"
      validate_certs:          false
  vars_files:
    - ../global.vars
  collections:
    - netapp.storagegrid

  tasks:
  - name: Get GRID authorization token
    uri:
      url:                     "https://{{ SG_ADMIN_NODE }}/api/v3/authorize"
      method:                  POST
      validate_certs:          false
      body_format:             json
      body: {
        "username":            "{{ SG_ADMIN_USER }}",
        "password":            "{{ SG_ADMIN_PASS }}",
        "cookie":              false,
        "csrfToken":           false
      }
    register: grid_auth_response

  - name: Add Check if HA-Group Exists
    uri:
      url: "https://{{ SG_ADMIN_NODE }}/api/v3/private/ha-groups"
      headers:
        Authorization: "{{ grid_auth_response.json.data }}"
      method: GET
      body_format: json
      validate_certs: false
    register: hagroups_list

  - name: Set hagroup_exists Variable
    set_fact:
      hagroup_exists: true
    loop: "{{ hagroups_list.json.data }}"
    when: item.name == HA_GROUP_NAME

  - name: Create HA-Group 
    uri:
      url: "https://{{ SG_ADMIN_NODE }}/api/v3/private/ha-groups"
      headers:
        Authorization: "{{ grid_auth_response.json.data }}"
      method: POST
      body: {
        "name": "{{ HA_GROUP_NAME }}",
        "description": "{{ HA_GROUP_DESCRIPTION }}",
        "virtualIps": "{{ HA_GROUP_VIP }}",
        "interfaces": "{{ HA_GROUP_INTERFACES }}"
        }
      body_format: json
      status_code: "201"
      validate_certs: false
    register: create_hagroup_results
    when: hagroup_exists is not defined

  - name: Add Check if Endpoint Exists
    uri:
      url: "https://{{ SG_ADMIN_NODE }}/api/v3/private/gateway-configs"
      headers:
        Authorization: "{{ grid_auth_response.json.data }}"
      method: GET
      body_format: json
      validate_certs: false
    register: endpoint_list

  - name: Set endpoint_exists Variable
    set_fact:
      endpoint_exists: true
    loop: "{{ endpoint_list.json.data }}"
    when: item.displayName == ENDPOINT_NAME

  - name: Create Endpoint 
    uri:
      url: "https://{{ SG_ADMIN_NODE }}/api/v3/private/gateway-configs"
      headers:
        Authorization: "{{ grid_auth_response.json.data }}"
      method: POST
      body: {
        "displayName": "{{ ENDPOINT_NAME }}",
        "port": "{{ ENDPOINT_PORT }}",
        "accountId": "0",
        "secure": false,
        "enableIPv4": true,
        "enableIPv6": false
        }
      body_format: json
      status_code: "201"
      validate_certs: false
    register: create_endpoint_results
    when: endpoint_exists is not defined

