#!/usr/bin/env ansible-playbook

##################################
# --->>> WORK IN PROGRESS <<<--- #
##################################

################################################################################
#
# Title:        90_delete_all.yml 
# Author:       Adrian Bronder
# Date:         2020-06-24
# Description:  Clean up entire environment
#               with Ansible modules
#
# Modules:      nac_sg_grid_account
#               nac_sg_org_container
#
# URLs:         https://docs.netapp.com/sgws-113/index.jsp
#               https://galaxy.ansible.com/netapp/storagegrid
#
# Built-in help:
# ansible-doc netapp.storagegrid.nac_sg_org_container
#
################################################################################

- hosts: localhost
  gather_facts: false
  vars:
    input_grid: &input_grid
      api_url:                 "https://{{ SG_ADMIN_NODE }}"
      auth_token:              "{{ grid_auth_response.json.data }}"
      validate_certs:          false
    input_tenant: &input_tenant
      api_url:                 "https://{{ SG_ADMIN_NODE }}"
      auth_token:              "{{ tenant_auth_response.json.data }}"
      validate_certs:          false
  vars_files:
    - ../global.vars
  collections:
    - netapp.storagegrid

  tasks:
  - name: Get GRID authorization token
    uri:
      url: "https://{{ SG_ADMIN_NODE }}/api/v3/authorize"
      method: POST
      body: {
        "username":            "{{ SG_ADMIN_USER }}",
        "password":            "{{ SG_ADMIN_PASS }}",
        "cookie":              false,
        "csrfToken":           false
      }
      body_format: json
      validate_certs: false
    register: grid_auth_response

  - name: Get GRID tenants
    uri:
      url: "https://{{ SG_ADMIN_NODE }}/api/v3/grid/accounts?includeMarker=true"
      method: GET
      headers: {
        "accept":              "application/json",
        "Authorization":       "{{ grid_auth_response.json.data }}"
      }
      validate_certs: false
    register: grid_tenants

  - name: Get tenant by name
    set_fact:
      selected_tenant: '{{ grid_tenants.json.data |
                           selectattr("name", "equalto", TENANT) |
                           list }}'

  - name: Check for unique tenant
    fail:
      msg: "Unique tenant ID for given name '{{ TENANT }}' not found"
    when:
      ( selected_tenant | length ) != 1

  - name: Get tenant authorization token
    uri:
      url: "https://{{ SG_ADMIN_NODE }}/api/v3/authorize"
      method: POST
      body: {
        "accountId":           "{{ selected_tenant.0.id }}",
        "username":            "root",
        "password":            "{{ TENANT_ROOT_PASS }}",
        "cookie":              false,
        "csrfToken":           false
      }
      body_format: json
      validate_certs: false
    register: tenant_auth_response

#  - name: Delete S3 bucket
#    s3_bucket:
#      name:                    "{{ TENANT }}-{{ BUCKET_NAME }}"
#      s3_url:                  "https://{{ SG_GW_NODE1 }}:8082/"
#      aws_access_key:          "<access key>"
#      aws_secret_key:          "<secret>"
#      validate_certs:          false
#      state:                   absent

  - name: Delete GRID tenant
    nac_sg_grid_account:
      state:                   absent
      name:                    "{{ selected_tenant.0.name }}"
      protocol:                s3
      <<: *input_grid
